// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Plant {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  code        String    @unique
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // One Plant has many Sections
  sections    Section[]
}

model Section {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Foreign key a Plant
  plantId     Int
  plant       Plant     @relation(fields: [plantId], references: [id])

  // One Section has many Data entries
  data        Data[]
  // One Section has many Gauge entries
  gauges      Gauge[]
}

model Color {
  id          Int       @id @default(autoincrement())
  color       String    @unique
  display     String
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // One Color has many Data entries
  data        Data[]
}

model Data {
  id          Int       @id @default(autoincrement())
  value       String    
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relation to Color
  colorId     Int
  color       Color     @relation(fields: [colorId], references: [id])

  // Relation to Section
  sectionId   Int
  section     Section   @relation(fields: [sectionId], references: [id])

  // Ensure unique combination of sectionId and value
  @@unique([sectionId, value])
  // Ensure unique combination of sectionId and colorId
  @@unique([sectionId, colorId])
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  plant       String
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Insulator {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // One Insulator has many Gauges
  gauges      Gauge[]
}

model Gauge {
  id              Int       @id @default(autoincrement())
  gauge           String
  rings           String
  features        String
  status          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relation to Insulator
  insulatorId     Int
  insulator       Insulator @relation(fields: [insulatorId], references: [id])

  // Relation to Section
  sectionId       Int
  section         Section   @relation(fields: [sectionId], references: [id])

  // Unique combination constraint
  @@unique([insulatorId, sectionId, gauge, rings, features])
}
